@use 'sass:color';
@use 'sass:math';
@use 'sass:string';

@function toRGBValues($colour) {
  @return color.red($colour) + ', ' + color.green($colour) + ', ' + color.blue($colour);
}

@function toRGB($colour) {
  @return rgb(color.red($colour), color.green($colour), color.blue($colour));
}

@function toRGBA($colour, $alpha: 1) {
  @return rgba(toRGB($colour), $alpha);
}

@function rgbComponents($color) {
  // NOTE: New format (TODO, @see https://sass-lang.com/documentation/breaking-changes/color-functions/#old-channel-functions)
  // Old format (pre SASS v.1.80?)
  // @return color.red($color) color.green($color) color.blue($color);
  // Remove decimals from automatically generated colors with `math.round`, like following (primaryLightColor): `rgb(218.3846153846, 53.6153846154, 126.8461538462)`
  @return math.clamp(0, math.round(color.channel($color, 'red', $space: rgb)), 255),
    math.clamp(0, math.round(color.channel($color, 'green', $space: rgb)), 255),
    math.clamp(0, math.round(color.channel($color, 'blue', $space: rgb)), 255);
}

// Helper function: convert a single channel value (0-255) to two-digit hex
@function channel-to-hex($channel) {
  $hex: string.slice(
      '0123456789abcdef',
      math.floor(math.div($channel, 16) + 1),
      math.floor(math.div($channel, 16) + 1)
    ) +
    string.slice('0123456789abcdef', (($channel % 16) + 1), (($channel % 16) + 1));
  @return $hex;
}

@function hexColor($color) {
  @return '#' +
    channel-to-hex(math.clamp(0, math.round(color.channel($color, 'red', $space: rgb)), 255)) +
    channel-to-hex(math.clamp(0, math.round(color.channel($color, 'green', $space: rgb)), 255)) +
    channel-to-hex(math.clamp(0, math.round(color.channel($color, 'blue', $space: rgb)), 255));
}

@function cleanRgb($rgb) {
  @return rgb(rgbComponents($rgb));
}

@mixin defineThemeSpread($color, $fix: 0%) {
  --theme-color-50-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 45%))};
  --theme-color-100-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 40%))};
  --theme-color-200-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 30%))};
  --theme-color-300-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 20%))};
  --theme-color-400-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 10%))};
  --theme-color-500-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix))};
  --theme-color-600-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 10%))};
  --theme-color-700-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 20%))};
  --theme-color-800-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 30%))};
  --theme-color-900-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 40%))};
  --theme-color-950-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 45%))};
}
@mixin defineThemeColor($id, $color, $fix: 0%) {
  --color-#{'' + $id}-50-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 45%))};
  --color-#{'' + $id}-100-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 40%))};
  --color-#{'' + $id}-200-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 30%))};
  --color-#{'' + $id}-300-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 20%))};
  --color-#{'' + $id}-400-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix - 10%))};
  --color-#{'' + $id}-500-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix))};
  --color-#{'' + $id}-600-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 10%))};
  --color-#{'' + $id}-700-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 20%))};
  --color-#{'' + $id}-800-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 30%))};
  --color-#{'' + $id}-900-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 40%))};
  --color-#{'' + $id}-950-RGB: #{rgbComponents(color.adjust($color, $lightness: $fix + 45%))};
  --color-#{'' + $id}-50: #{hexColor(color.adjust($color, $lightness: $fix - 45%))};
  --color-#{'' + $id}-100: #{hexColor(color.adjust($color, $lightness: $fix - 40%))};
  --color-#{'' + $id}-200: #{hexColor(color.adjust($color, $lightness: $fix - 30%))};
  --color-#{'' + $id}-300: #{hexColor(color.adjust($color, $lightness: $fix - 20%))};
  --color-#{'' + $id}-400: #{hexColor(color.adjust($color, $lightness: $fix - 10%))};
  --color-#{'' + $id}-500: #{hexColor(color.adjust($color, $lightness: $fix))};
  --color-#{'' + $id}-600: #{hexColor(color.adjust($color, $lightness: $fix + 10%))};
  --color-#{'' + $id}-700: #{hexColor(color.adjust($color, $lightness: $fix + 20%))};
  --color-#{'' + $id}-800: #{hexColor(color.adjust($color, $lightness: $fix + 30%))};
  --color-#{'' + $id}-900: #{hexColor(color.adjust($color, $lightness: $fix + 40%))};
  --color-#{'' + $id}-950: #{hexColor(color.adjust($color, $lightness: $fix + 45%))};
}

// Define themes (from a global variable `$themes`, see definition in the `src/config/themeColors.ts`)
@mixin defineAllThemes($themes, $defaultTheme) {
  @each $id, $color, $fix in $themes {
    /* Theme: #{$id} #{$color} #{$fix} */
    @if $id == $defaultTheme {
      /* Default theme */
      html,
      html[data-theme-color=#{'' + $id}] {
        @include defineThemeSpread($color, $fix);
      }
    } @else {
      html[data-theme-color=#{'' + $id}] {
        @include defineThemeSpread($color, $fix);
      }
    }
  }
}

// Define themes (from a global variable `$themes`, see definition in the `src/config/themeColors.ts`)
@mixin defineAllColors($themes, $defaultTheme) {
  :root {
    @each $id, $color, $fix in $themes {
      /* Theme color: #{$id} #{$color} #{$fix} */
      @include defineThemeColor($id, $color, $fix);
    }
  }
}
